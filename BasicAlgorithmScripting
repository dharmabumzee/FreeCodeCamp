// 01 - Basic Algorithm Scripting: Convert Celsius to Fahrenheit
// The algorithm to convert from Celsius to Fahrenheit is the temperature in Celsius times 9/5, plus 32.
// You are given a variable celsiusrepresenting a temperature in Celsius. 
// Use the variable fahrenheitalready defined and assign it the Fahrenheit temperature equivalent to the given 
// Celsius temperature. Use the algorithm mentioned above to help convert the Celsius temperature to Fahrenheit.

const convertToF = celsius => celsius * (9/5) + 32;

convertToF(30);
















// 04 - Basic Algorithm Scripting: Find the Longest Word in a String
// Return the length of the longest word in the provided sentence.
// Your response should be a number.

// firstSolution

function findLongestWordLength(str) {
  var words = str.split(" ");
  var longestWord = 0;

  for (var i = 0; i < words.length; i++) {
    if (words[i].length > longestWord) {
      longestWord = words[i].length;
    } 
  }
  return longestWord;
}

findLongestWordLength("The quick brown fox jumped over the lazy dog");

// 05 - Basic Algorithm Scripting: Return Largest Numbers in Arrays
// Return an array consisting of the largest number from each provided sub-array. 
// For simplicity, the provided array will contain exactly 4 sub-arrays.

// firstSolution

function largestOfFour(arr) {
  var finalArray = [];
  for (var i = 0; i < arr.length; i++) {
    var largestNumber = arr[i][0];
    for (var j = 0; j < arr[i].length; j++) {
      if (arr[i][j] > largestNumber) {
        largestNumber = arr[i][j];
      }
    }
    finalArray[i] = largestNumber;
  }

  return finalArray
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);



// secondSolution

function largestOfFour(mainArray) {
  return mainArray.map(function(subArray) {
    return Math.max.apply(null, subArray);
  });
}

// thirdSolution

function largestOfFour(arr) {
  return arr.map(Function.apply.bind(Math.max, null));
}

// 06 - Basic Algorithm Scripting: Confirm the Ending
// Check if a string (first argument, str) ends with the given target string (second argument, target).
// This challenge can be solved with the .endsWith() method, which was introduced in ES2015. 
// But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.

// firstSolution

function confirmEnding(str, target) {
  if (str.substr(-target.length) === target) {
    return true;
  } else {
    return false;
  }
}

confirmEnding("Bastian", "n");

// secondSolution

const confirmEnding = (str, target) => str.substr(-target.length) === target ? true : false;


// 07 - Basic Algorithm Scripting: Repeat a String Repeat a String
// Repeat a given string str (first argument) for num times (second argument).
// Return an empty string if num is not a positive number.

// firstSolution

function repeatStringNumTimes(str, num) {
  var newString = "";
  if (num > 0) {
      for (var i = 0; i < num; i++) {
        newString = newString.concat(str);
      }
  } else {
    return "";
  }
  return newString;
}

repeatStringNumTimes("abc", 3);

// 09 - Basic Algorithm Scripting: Truncate a String
// Truncate a string (first argument) if it is longer than the given maximum string length (second argument). 
// Return the truncated string with a ... ending.

// firstSolution

function truncateString(str, num) {
  if (str.length > num) {
    return str.slice(0, num) + "...";
  } else {
      return str;
  }
}

truncateString("A-tisket a-tasket A green and yellow basket", 8);

// secondSolution

const truncateString = (str, num) => str.length > num ? str.slice(0, num) + "..." : str;

truncateString("A-tisket a-tasket A green and yellow basket", 8);


// 10 - Basic Algorithm Scripting: Finders Keepers
// Create a function that looks through an array (first argument) and returns the first element in the array that passes a
// truth test (second argument). If no element passes the test, return undefined.

// firstSolution

function findElement(arr, func) {
  let num = 0;
  for (let i = 0; i < arr.length; i++) {
      num = arr[i];
    if (func(num)) {
      return num;
    }
  }
  return undefined;
}

findElement([1, 2, 3, 4], num => num % 2 === 0);


// secondSolution

const findElement = (arr, func) => arr.find(func);

findElement([1, 2, 3, 4], num => num % 2 === 0);

// 11 - Basic Algorithm Scripting: Boo who
// Check if a value is classified as a boolean primitive. Return true or false.
// Boolean primitives are true and false.

const booWho = bool => typeof bool === 'boolean' ? true : false;

booWho(null);


// 12 - Basic Algorithm Scripting: Title Case a Sentence
// Return the provided string with the first letter of each word capitalized. 
// Make sure the rest of the word is in lower case.
// For the purpose of this exercise, you should also capitalize connecting words like "the" and "of".

const titleCase = str  => str.toLowerCase().replace(/(^|\s)\S/g, x => x.toUpperCase());

titleCase("I'm a little tea pot");

// 13 - Basic Algorithm Scripting: Slice and Splice
// You are given two arrays and an index. 
// Use the array methods sliceand spliceto copy each element of the first array into the second array, in order.
// Begin inserting elements at index nof the second array.
// Return the resulting array. The input arrays should remain the same after the function runs.

function frankenSplice(arr1, arr2, n) {
  var result = arr2.slice();
  result.splice(n, 0, ...arr1);

  return result;
}

frankenSplice([1, 2, 3], [4, 5, 6], 1);


// 14 - Basic Algorithm Scripting: Falsy Bouncer
// Remove all falsy values from an array.
// Falsy values in JavaScript are false, null, 0, "", undefined, and NaN.
// Hint: Try converting each value to a Boolean.

const bouncer = arr => arr.filter(Boolean);

bouncer([7, "ate", "", false, 9]);

// bouncer([7, "ate", "", false, 9])should return [7, "ate", 9].
// bouncer(["a", "b", "c"])should return ["a", "b", "c"].
// bouncer([false, null, 0, NaN, undefined, ""])should return [].
// bouncer([1, null, NaN, 2, undefined])should return [1, 2].


// 15 - Basic Algorithm Scripting: Where do I Belong
// Return the lowest index at which a value (second argument) should be inserted into an array (first argument)
// once it has been sorted. The returned value should be a number.
// For example, getIndexToIns([1,2,3,4], 1.5)should return 1because it is greater than 1(index 0), but less than 2(index 1).
// Likewise, getIndexToIns([20,3,5], 19)should return 2because once the array has been sorted it will look like [3,5,20]and 
// 19is less than 20(index 2) and greater than 5(index 1).

const getIndexToIns = (arr, num) => arr.concat(num).sort((a, b) => a - b).indexOf(num);

getIndexToIns([5, 3, 20, 3], 5)


// getIndexToIns([10, 20, 30, 40, 50], 35)should return 3.
// getIndexToIns([10, 20, 30, 40, 50], 35)should return a number.
// getIndexToIns([10, 20, 30, 40, 50], 30)should return 2.
// getIndexToIns([10, 20, 30, 40, 50], 30)should return a number.
// getIndexToIns([40, 60], 50)should return 1.
// getIndexToIns([40, 60], 50)should return a number.
// getIndexToIns([3, 10, 5], 3)should return 0.
// getIndexToIns([3, 10, 5], 3)should return a number.
// getIndexToIns([5, 3, 20, 3], 5)should return 2.
// getIndexToIns([5, 3, 20, 3], 5)should return a number.
// getIndexToIns([2, 20, 10], 19)should return 2.
// getIndexToIns([2, 20, 10], 19)should return a number.
// getIndexToIns([2, 5, 10], 15)should return 3.
// getIndexToIns([2, 5, 10], 15)should return a number.
// getIndexToIns([], 1)should return 0.
// getIndexToIns([], 1)should return a number.



// 16 - Basic Algorithm Scripting: Mutations
// Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.
// For example, ["hello", "Hello"], should return true because all of the letters in the second string are present in the first, ignoring case.
// The arguments ["hello", "hey"]should return false because the string "hello" does not contain a "y".
// Lastly, ["Alien", "line"], should return true because all of the letters in "line" are present in "Alien".

function mutation(arr) {
  var first = arr[0].toLowerCase();
  var second = arr[1].toLowerCase();
  for (var i = 0; i < second.length; i++) {
    if (first.indexOf(second[i]) < 0) return false;
  }
  return true;
}

// mutation(["hello", "hey"]);
// mutation(["hello", "hey"])should return false.
// mutation(["hello", "Hello"])should return true.
// mutation(["zyxwvutsrqponmlkjihgfedcba", "qrstu"])should return true.
// mutation(["Mary", "Army"])should return true.
// mutation(["Mary", "Aarmy"])should return true.
// mutation(["Alien", "line"])should return true.
// mutation(["floor", "for"])should return true.
// mutation(["hello", "neo"])should return false.
// mutation(["voodoo", "no"])should return false.



// 17 - Basic Algorithm Scripting: Chunky Monkey
// Write a function that splits an array (first argument)into groups the length of size(second argument) and
// returns them as a two-dimensional array.

// firstSolution (with splice)

function chunkArrayInGroups(arr, size) {
  let result = [];

  while (arr.length > 0)  { // while (arr.length)
    let x = arr.splice(size);
    result.push(arr);
    arr = x;
  }
  return result;
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);

// secondSolution (with slice)

function chunkArrayInGroups(arr, size) {
  let result = [];
  
  for (var i = 0; i < arr.length; i+=size) {
    result.push(arr.slice(i, i + size));
    }
  return result;
}


chunkArrayInGroups(["a", "b", "c", "d"], 2);



// chunkArrayInGroups(["a", "b", "c", "d"], 2)should return [["a", "b"], ["c", "d"]].
// chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)should return [[0, 1, 2], [3, 4, 5]].
// chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)should return [[0, 1], [2, 3], [4, 5]].
// chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)should return [[0, 1, 2, 3], [4, 5]].
// chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)should return [[0, 1, 2], [3, 4, 5], [6]].
// chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)should return [[0, 1, 2, 3], [4, 5, 6, 7], [8]].
// chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)should return [[0, 1], [2, 3], [4, 5], [6, 7], [8]].


