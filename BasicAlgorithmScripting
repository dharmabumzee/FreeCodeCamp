// 04 - Basic Algorithm Scripting: Find the Longest Word in a String
// Return the length of the longest word in the provided sentence.
// Your response should be a number.

// firstSolution

function findLongestWordLength(str) {
  var words = str.split(" ");
  var longestWord = 0;

  for (var i = 0; i < words.length; i++) {
    if (words[i].length > longestWord) {
      longestWord = words[i].length;
    } 
  }
  return longestWord;
}

findLongestWordLength("The quick brown fox jumped over the lazy dog");

// 05 - Basic Algorithm Scripting: Return Largest Numbers in Arrays
// Return an array consisting of the largest number from each provided sub-array. 
// For simplicity, the provided array will contain exactly 4 sub-arrays.

// firstSolution

function largestOfFour(arr) {
  var finalArray = [];
  for (var i = 0; i < arr.length; i++) {
    var largestNumber = arr[i][0];
    for (var j = 0; j < arr[i].length; j++) {
      if (arr[i][j] > largestNumber) {
        largestNumber = arr[i][j];
      }
    }
    finalArray[i] = largestNumber;
  }

  return finalArray
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);



// secondSolution

function largestOfFour(mainArray) {
  return mainArray.map(function(subArray) {
    return Math.max.apply(null, subArray);
  });
}

// thirdSolution

function largestOfFour(arr) {
  return arr.map(Function.apply.bind(Math.max, null));
}

// 06 - Basic Algorithm Scripting: Confirm the Ending
// Check if a string (first argument, str) ends with the given target string (second argument, target).
// This challenge can be solved with the .endsWith() method, which was introduced in ES2015. 
// But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.

// firstSolution

function confirmEnding(str, target) {
  if (str.substr(-target.length) === target) {
    return true;
  } else {
    return false;
  }
}

confirmEnding("Bastian", "n");

// secondSolution

const confirmEnding = (str, target) => str.substr(-target.length) === target ? true : false;


// 07 - Basic Algorithm Scripting: Repeat a String Repeat a String
// Repeat a given string str (first argument) for num times (second argument).
// Return an empty string if num is not a positive number.

// firstSolution

function repeatStringNumTimes(str, num) {
  var newString = "";
  if (num > 0) {
      for (var i = 0; i < num; i++) {
        newString = newString.concat(str);
      }
  } else {
    return "";
  }
  return newString;
}

repeatStringNumTimes("abc", 3);

// 09 - Basic Algorithm Scripting: Truncate a String
// Truncate a string (first argument) if it is longer than the given maximum string length (second argument). 
// Return the truncated string with a ... ending.

// firstSolution

function truncateString(str, num) {
  if (str.length > num) {
    return str.slice(0, num) + "...";
  } else {
      return str;
  }
}

truncateString("A-tisket a-tasket A green and yellow basket", 8);

// secondSolution

const truncateString = (str, num) => str.length > num ? str.slice(0, num) + "..." : str;

truncateString("A-tisket a-tasket A green and yellow basket", 8);


// 10 - Basic Algorithm Scripting: Finders Keepers
// Create a function that looks through an array (first argument) and returns the first element in the array that passes a
// truth test (second argument). If no element passes the test, return undefined.

// firstSolution

function findElement(arr, func) {
  let num = 0;
  for (let i = 0; i < arr.length; i++) {
      num = arr[i];
    if (func(num)) {
      return num;
    }
  }
  return undefined;
}

findElement([1, 2, 3, 4], num => num % 2 === 0);


// secondSolution

const findElement = (arr, func) => arr.find(func);

findElement([1, 2, 3, 4], num => num % 2 === 0);

// 11 - Basic Algorithm Scripting: Boo who
// Check if a value is classified as a boolean primitive. Return true or false.
// Boolean primitives are true and false.

const booWho = bool => typeof bool === 'boolean' ? true : false;

booWho(null);








