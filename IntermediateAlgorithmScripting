// 01 - Sum All Numbers In a Range
// We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them.
// The lowest number will not always come first.

// firstSolution

function sumAll(arr) {
  var count = 0;
  if (arr[0] < arr[1]) {
      for (var i = arr[0]; i <= arr[1]; i++) {
        count += i;
      }
  } else {
      for (var i = arr[0]; i >= arr[1]; i--) {
        count += i;
      }
    }    
  return count;
}

sumAll([1, 4]);

// secondSolution

function sumAll(arr) {
  let max = Math.max(arr[0], arr[1]);
  let min = Math.min(arr[0], arr[1]);
  return (max * (max + 1) / 2 ) - ( (min - 1) * min / 2);
}



// sumAll([1, 4]) should return a number.
// sumAll([1, 4]) should return 10.
// sumAll([4, 1]) should return 10.
// sumAll([5, 10]) should return 45.
// sumAll([10, 5]) should return 45.



// 02 - Intermediate Algorithm Scripting: Diff Two Arrays
// Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. 
// In other words, return the symmetric difference of the two arrays.

function diffArray(arr1, arr2) {
  //var newArr = [];
  return arr1
    .concat(arr2)
    .filter(item => !arr1.includes(item) || !arr2.includes(item));
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

// diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) should return an array.
// ["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"] should return ["pink wool"].
// ["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"] should return an array with one item.
// ["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"] should return ["diorite", "pink wool"].
// ["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"] should return an array with two items.
// ["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"] should return [].
// ["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"] should return an empty array.
// [1, 2, 3, 5], [1, 2, 3, 4, 5] should return [4].
// [1, 2, 3, 5], [1, 2, 3, 4, 5] should return an array with one item.
// [1, "calf", 3, "piglet"], [1, "calf", 3, 4] should return ["piglet", 4].
// [1, "calf", 3, "piglet"], [1, "calf", 3, 4] should return an array with two items.
// [], ["snuffleupagus", "cookie monster", "elmo"] should return ["snuffleupagus", "cookie monster", "elmo"].
// [], ["snuffleupagus", "cookie monster", "elmo"] should return an array with three items.
// [1, "calf", 3, "piglet"], [7, "filly"] should return [1, "calf", 3, "piglet", 7, "filly"].
// [1, "calf", 3, "piglet"], [7, "filly"] should return an array with six items.



// 03 - Intermediate Algorithm Scripting: Seek and Destroy
// You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments.
// Remove all elements from the initial array that are of the same value as these arguments.
// You have to use the arguments object.

const destroyer = (arr, ...args) => arr.filter(i => !args.includes(i));

// destroyer([1, 2, 3, 1, 2, 3], 2, 3);
// destroyer([1, 2, 3, 1, 2, 3], 2, 3) should return [1, 1].
// destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) should return [1, 5, 1].
// destroyer([3, 5, 1, 2, 2], 2, 3, 5) should return [1].
// destroyer([2, 3, 2, 3], 2, 3) should return [].
// destroyer(["tree", "hamburger", 53], "tree", 53) should return ["hamburger"].
// destroyer(["possum", "trollo", 12, "safari", "hotdog", 92, 65, "grandma", "bugati", "trojan", "yacht"], "yacht", "possum", "trollo", "safari", "hotdog", "grandma", "bugati", "trojan") should return [12,92,65].


// 04 - Intermediate Algorithm Scripting: Wherefore art thou
// Make a function that looks through an array of objects (first argument) and returns an array of all objects that have 
// matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the 
// object from the collection if it is to be included in the returned array.
// For example, if the first argument is [{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, 
// { first: "Tybalt", last: "Capulet" }], and the second argument is { last: "Capulet" }, 
// then you must return the third object from the array (the first argument), because it contains the name and its value, 
// that was passed on as the second argument.


function whatIsInAName(collection, source) {
  // What's in a name?
  var arr = [];
  // Only change code below this line
  
  arr = collection
          .filter(function(item) {
              for (let i in source) {
                if (source[i] != item[i]) {
                  return false;
                } 
              }
           return true;
  });
  

  // Only change code above this line
  return arr;
}


whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

// whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" })should return [{ first: "Tybalt", last: "Capulet" }].
// whatIsInAName([{ "apple": 1 }, { "apple": 1 }, { "apple": 1, "bat": 2 }], { "apple": 1 })should return [{ "apple": 1 }, { "apple": 1 }, { "apple": 1, "bat": 2 }].
// whatIsInAName([{ "apple": 1, "bat": 2 }, { "bat": 2 }, { "apple": 1, "bat": 2, "cookie": 2 }], { "apple": 1, "bat": 2 })should return [{ "apple": 1, "bat": 2 }, { "apple": 1, "bat": 2, "cookie": 2 }].
// whatIsInAName([{ "apple": 1, "bat": 2 }, { "apple": 1 }, { "apple": 1, "bat": 2, "cookie": 2 }], { "apple": 1, "cookie": 2 })should return [{ "apple": 1, "bat": 2, "cookie": 2 }].
// whatIsInAName([{ "apple": 1, "bat": 2 }, { "apple": 1 }, { "apple": 1, "bat": 2, "cookie": 2 }, { "bat":2 }], { "apple": 1, "bat": 2 })should return [{ "apple": 1, "bat": 2 }, { "apple": 1, "bat": 2, "cookie":2 }].
// whatIsInAName([{"a": 1, "b": 2, "c": 3}], {"a": 1, "b": 9999, "c": 3})should return []

// 05 - Intermediate Algorithm Scripting: Spinal Tap Case
// Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.

function spinalCase(str) {
  // "It's such a fine line between stupid, and clever."
  // --David St. Hubbins
  return str
    .split(/\s|_|(?=[A-Z])/)
    .join("-")
    .toLowerCase();
}

// spinalCase("This Is Spinal Tap")should return "this-is-spinal-tap".
// spinalCase("thisIsSpinalTap")should return "this-is-spinal-tap".
// spinalCase("The_Andy_Griffith_Show")should return "the-andy-griffith-show".
// spinalCase("Teletubbies say Eh-oh")should return "teletubbies-say-eh-oh".
// spinalCase("AllThe-small Things")should return "all-the-small-things".



// 06 - Intermediate Algorithm Scripting: Pig Latin
// Translate the provided string to pig latin.
// Pig Latin takes the first consonant (or consonant cluster) of an English word, 
// moves it to the end of the word and suffixes an "ay".
// If a word begins with a vowel you just add "way" to the end.
// Input strings are guaranteed to be English words in all lowercase.


function translatePigLatin(str) {
  let regex = /^[^aeiou]+/;

  if (str.match(regex)) {
    return str.replace(regex, "").concat(str.match(regex) + "ay");
  } else {
    return str.concat("way");
  }
}

// translatePigLatin("consonant");
// translatePigLatin("california")should return "aliforniacay".
// translatePigLatin("paragraphs")should return "aragraphspay".
// translatePigLatin("glove")should return "oveglay".
// translatePigLatin("algorithm")should return "algorithmway".
// translatePigLatin("eight")should return "eightway".
// Should handle words where the first vowel comes in the end of the word.
// Should handle words without vowels.

// 07 - Intermediate Algorithm Scripting: Search and Replace
// Perform a search and replace on the sentence using the arguments provided and return the new sentence.
// First argument is the sentence to perform the search and replace on.
// Second argument is the word that you will be replacing (before).
// Third argument is what you will be replacing the second argument with (after).
// Note
// Preserve the case of the first character in the original word when you are replacing it. 
// For example if you mean to replace the word "Book" with the word "dog", it should be replaced as "Dog"


function myReplace(str, before, after) {
  let i = str.indexOf(before);
  if (str[i] === str[i].toUpperCase()) {
     after = after.charAt(0).toUpperCase() + after.slice(1);
  }
  str = str.replace(before, after);
  return str;
}

myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");


// myReplace("Let us go to the store", "store", "mall")should return "Let us go to the mall".
// myReplace("He is Sleeping on the couch", "Sleeping", "sitting")should return "He is Sitting on the couch".
// myReplace("This has a spellngi error", "spellngi", "spelling")should return "This has a spelling error".
// myReplace("His name is Tom", "Tom", "john")should return "His name is John".
// myReplace("Let us get back to more Coding", "Coding", "algorithms")should return "Let us get back to more Algorithms".


// 08 - Intermediate Algorithm Scripting: DNA Pairing
// The DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array.
// Base pairs are a pair of AT and CG. Match the missing element to the provided character.
// Return the provided character as the first element in each array.
// For example, for the input GCG, return [["G", "C"], ["C","G"],["G", "C"]]
// The character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.


// firstSolution

function pairElement(str) {
  let result = [];
  str.split("");
  for (let i = 0; i < str.length; i++) {
    if (str[i] === "A") {
        result.push(["A","T"]);
    } else if (str[i] === "T") {
        result.push(["T","A"]);
    } else if (str[i] === "C") {
        result.push(["C","G"]);
  } else if (str[i] === "G") {
        result.push(["G","C"]);
    }
  }
  return result;
}

pairElement("GCG")


// secondSolution

function pairElement(str) {
  let result = [];
  str.split("");
  for (let i = 0; i < str.length; i++) {
        str[i] === "A" ? result.push(["A","T"])   
      : str[i] === "T" ? result.push(["T","A"])      
      : str[i] === "C" ? result.push(["C","G"])          
      : result.push(["G","C"]);
  }
  return result;
}

// thirdSolution

function pairElement(str) {
  str = str.split("");
  let matchPair = {
      A: "T",
      T: "A",
      C: "G",
      G: "C"
  }
  return str.map(i => [i, matchPair[i]]);
}


// pairElement("ATCGA")should return [["A","T"],["T","A"],["C","G"],["G","C"],["A","T"]].
// pairElement("TTGAG")should return [["T","A"],["T","A"],["G","C"],["A","T"],["G","C"]].
// pairElement("CTCTA")should return [["C","G"],["T","A"],["C","G"],["T","A"],["A","T"]].


// 09 - Intermediate Algorithm Scripting: Missing letters
// Find the missing letter in the passed letter range and return it.
// If all letters are present in the range, return undefined.

function fearNotLetter(str) {
  for (var i = 0; i < str.length; i++) {
    if (str.charCodeAt(i) !== str.charCodeAt(0) + i) {
      return String.fromCharCode(str.charCodeAt(i) - 1);
    }
  }
  return undefined;
}

fearNotLetter("abce");

// fearNotLetter("abce")should return "d".
// fearNotLetter("abcdefghjklmno")should return "i".
// fearNotLetter("stvwx")should return "u".
// fearNotLetter("bcdf")should return "e".
// fearNotLetter("abcdefghijklmnopqrstuvwxyz")should return undefined.



// 10 - Intermediate Algorithm Scripting: Sorted Union
// Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.
// In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.
// The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.

// firstSolution

function uniteUnique(arr) {
  let result = [];
  let args = Array.from(arguments);
  
  for (let i = 0; i < args.length; i++) {
    for (let j = 0; j < args[i].length; j++) {
      if(!result.includes(args[i][j])) {
        result.push(args[i][j])
      }
    }
  }
  return result;
}


// secondSolution

function uniteUnique(arr) {
  let result = [];
  for (let x of arguments) {
    for (let y of x) {
      if(result.indexOf(y) === -1) {
        result.push(y);
      }
    }
  }
  return result;
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);


// thirdSolution

function uniteUnique(arr) {
  return Array.from(arguments).reduce((x, y) => x.concat(y.filter(z => x.indexOf(z) == -1)), []);
}

// fourthSolution

function uniteUnique(arr) {
  return [...new Set([].concat(...arguments))];
}


// uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])should return [1, 3, 2, 5, 4].
// uniteUnique([1, 3, 2], [1, [5]], [2, [4]])should return [1, 3, 2, [5], [4]].
// uniteUnique([1, 2, 3], [5, 2, 1])should return [1, 2, 3, 5].
// uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])should return [1, 2, 3, 5, 4, 6, 7, 8].



// 11 - Intermediate Algorithm Scripting: Convert HTML Entities
// Convert the characters &, <, >, "(double quote), and '(apostrophe), in a string to their corresponding HTML entities.

function convertHTML(str) {
  const characters = {
    '&' : "&amp;",
    '<' : "&lt;",
    '>' : "&gt;",
    '"' : "&quot;",
    "'" : "&apos;",
  }
  return str.replace(/([&<>\"'])/g, match => characters[match]);
}

convertHTML("Dolce & Gabbana");


// convertHTML("Dolce & Gabbana")should return Dolce &​amp; Gabbana.
// convertHTML("Hamburgers < Pizza < Tacos")should return Hamburgers &​lt; Pizza &​lt; Tacos.
// convertHTML("Sixty > twelve")should return Sixty &​gt; twelve.
// convertHTML('Stuff in "quotation marks"')should return Stuff in &​quot;quotation marks&​quot;.
// convertHTML("Schindler's List")should return Schindler&​apos;s List.
// convertHTML("<>")should return &​lt;&​gt;.
// convertHTML("abc")should return abc.


// 12 - Intermediate Algorithm Scripting: Sum All Odd Fibonacci Numbers
// Given a positive integer num, return the sum of all odd Fibonacci numbers that are less than or equal to num.
// The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers.
// The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.
// For example, sumFibs(10)should return 10because all odd Fibonacci numbers less than or equal to 10are 1, 1, 3, and 5.


function sumFibs(num) {
  let sumOfOddNumbers = 0;
  let firstNumber = 0;
  let secondNumber = 1;

  while (secondNumber <= num) {
    if (secondNumber % 2 === 1) {
      sumOfOddNumbers += secondNumber;
    }
    secondNumber += firstNumber;
    firstNumber = secondNumber - firstNumber;
  }
  return sumOfOddNumbers;
}

sumFibs(4);


// 13 - Intermediate Algorithm Scripting: Sum All Primes
// Sum all the prime numbers up to and including the provided number.
// A prime number is defined as a number greater than one and having only two divisors, one and itself. 
// For example, 2 is a prime number because it's only divisible by one and two.
// The provided number may not be a prime.

function sumPrimes(num) {

  // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes

  let primesSum = 0;
  const sieve = new Array(num+1).fill(true)

  for (let i = 2; i <= Math.sqrt(num); i++) {
    if (sieve[i]) {
      for (let j = Math.pow(i, 2); j <= num; j += i) {
        sieve[j] = false
      }
    }
  }
  
  return sieve.reduce((primes, isPrime, i) => {
    if (isPrime && i > 1) {
      primesSum += i;
    }
    return primesSum;
  }, [])
}

sumPrimes(10);


// sumPrimes(10)should return a number.
// sumPrimes(10)should return 17.
// sumPrimes(977)should return 73156.


// 14 - Intermediate Algorithm Scripting: Smallest Common Multiple
// Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all 
// sequential numbers in the range between these parameters.
// The range will be an array of two numbers that will not necessarily be in numerical order.
// For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all 
// numbers between 1 and 3. The answer here would be 6.



function smallestCommons(arr) { 
  
  let a = Math.max(...arr);
  let b = Math.min(...arr);
  let lcm = a;

  for (let i = a - 1; i >= b; i--) {
    if (lcm % i) {
      lcm += a;
      i = a;
    }
  }
  return lcm;
}

smallestCommons([1, 5])
 
 
// smallestCommons([1, 5])should return a number.
// smallestCommons([1, 5])should return 60.
// smallestCommons([5, 1])should return 60.
// smallestCommons([2, 10])should return 2520.
// smallestCommons([1, 13])should return 360360.
// smallestCommons([23, 18])should return 6056820.


// 15 - Intermediate Algorithm Scripting: Drop it
// Given the array arr, iterate through and remove each element starting from the first element (the 0 index) until the 
// function funcreturns truewhen the iterated element is passed through it.
// Then return the rest of the array once the condition is satisfied, otherwise, arrshould be returned as an empty array.

function dropElements(arr, func) {
  let count = arr.length;
  for (let i = 0; i < count; i++) {
      if (func(arr[0])) {
        break;
      } else {
        arr.shift();
      }
  }
  return arr;
}


dropElements([1, 2, 3], function(n) {return n < 3; });

// dropElements([1, 2, 3, 4], function(n) {return n >= 3;})should return [3, 4].
// dropElements([0, 1, 0, 1], function(n) {return n === 1;})should return [1, 0, 1].
// dropElements([1, 2, 3], function(n) {return n > 0;})should return [1, 2, 3].
// dropElements([1, 2, 3, 4], function(n) {return n > 5;})should return [].
// dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;})should return [7, 4].
// dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;})should return [3, 9, 2].

// 16 - Intermediate Algorithm Scripting: Steamroller
// Flatten a nested array. You must account for varying levels of nesting.

function steamrollArray(arr) {
  return arr.flat(3);
}

steamrollArray([1, [2], [3, [[4]]]]);

// steamrollArray([[["a"]], [["b"]]])should return ["a", "b"].
// steamrollArray([1, [2], [3, [[4]]]])should return [1, 2, 3, 4].
// steamrollArray([1, [], [3, [[4]]]])should return [1, 3, 4].
// steamrollArray([1, {}, [3, [[4]]]])should return [1, {}, 3, 4]


// 17 - Intermediate Algorithm Scripting: Binary Agents
// Return an English translated sentence of the passed binary string.
// The binary string will be space separated.

function binaryAgent(str) {
  let splitString = str.split(" ");
  let result = [];

  for (let i = 0; i < splitString.length; i++) {
    let toInt = parseInt(splitString[i], 2);
    result.push(String.fromCharCode(toInt));
  }
  return result.join("");
}

binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");

// binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");
// binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111")should return "Aren't bonfires fun!?"
// binaryAgent("01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001")should return "I love FreeCodeCamp!"


// 18 - Intermediate Algorithm Scripting: Everything Be True
// Check if the predicate (second argument) is truthy on all elements of a collection (first argument).
// In other words, you are given an array collection of objects. The predicate prewill be an object property and you need to 
// return trueif its value is truthy. Otherwise, return false.
// In JavaScript, truthyvalues are values that translate to truewhen evaluated in a Boolean context.
// Remember, you can access object properties through either dot notation or []notation.

// firstSolution

function truthCheck(collection, pre) {
  let count = 0;
  for (let i in collection) {
    if (collection[i].hasOwnProperty(pre) && Boolean(collection[i][pre])) {
      count++;
    }
  }
  return count == collection.length ? true : false;
}

truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex");


// secondSolution

function truthCheck(collection, pre) {
 
  for (var i = 0; i < collection.length; i++) {
    if (!collection[i][pre]) {
      return false;
    }
  }
    return true;
}

truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex");


// truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex")should return true.
// truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex")should return false.
// truthCheck([{"user": "Tinky-Winky", "sex": "male", "age": 0}, {"user": "Dipsy", "sex": "male", "age": 3}, {"user": "Laa-Laa", "sex": "female", "age": 5}, {"user": "Po", "sex": "female", "age": 4}], "age")should return false.
// truthCheck([{"name": "Pete", "onBoat": true}, {"name": "Repeat", "onBoat": true}, {"name": "FastFoward", "onBoat": null}], "onBoat")should return false
// truthCheck([{"name": "Pete", "onBoat": true}, {"name": "Repeat", "onBoat": true, "alias": "Repete"}, {"name": "FastFoward", "onBoat": true}], "onBoat")should return true
// truthCheck([{"single": "yes"}], "single")should return true
// truthCheck([{"single": ""}, {"single": "double"}], "single")should return false
// truthCheck([{"single": "double"}, {"single": undefined}], "single")should return false
// truthCheck([{"single": "double"}, {"single": NaN}], "single")should return false


// 19 - Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum.
// For example, addTogether(2, 3)should return 5, and addTogether(2)should return a function.
// Calling this returned function with a single argument will then return the sum:
// var sumTwoAnd = addTogether(2);
// sumTwoAnd(3)returns 5.
// If either argument isn't a valid number, return undefined.


function addTogether() {
  let [x, y] = arguments;

  if (typeof x !== 'number' || (y && typeof y !== 'number')) {
    return undefined;
  }

  if (y) {
    return x + y;
  }

  return z => addTogether(x, z);
}

addTogether(2,3);


// addTogether(2, 3)should return 5.
// addTogether(2)(3)should return 5.
// addTogether("http://bit.ly/IqT6zt")should return undefined.
// addTogether(2, "3")should return undefined.
// addTogether(2)([3])should return undefined.
